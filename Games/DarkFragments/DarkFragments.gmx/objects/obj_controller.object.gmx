<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hazy_overlay</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
fade_counter = room_speed*2;
fade_in = true;
fade_out = false;
counter = 0;

global.timer = 0;

badend=false;

//Used for checking pause status
paused = false;
//Used for storing index room that called PauseMenu room
//(defaults to the current room on startup)
roomCameFrom = room;
image_alpha = 1;
image_index = 1;

instructional_text = true;
global.text_up = true;
text_displayed = false;
text_fade = false;
text_fade_counter = 0;
text_fade_rate = room_speed*3;

keyboard_counter = 0;
keyboard_delay = room_speed*2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(room == rm_splash)
{
    if(fade_in)
    {
        image_alpha-=1/fade_counter;
        if(image_alpha &lt;=0)
        {
            fade_in = false;
        }
    }
    else if(fade_out)
    {
        image_alpha+=1/fade_counter;
        if(image_alpha&gt;=1)
        {
            fade_counter = -1;   
        }
    }
    else
    {
        counter+=1;
        if(counter&gt;=fade_counter)
        {
            fade_out = true;
        }
    }
    if(fade_counter = -1)
    {
        image_alpha = 0;
        image_index = 0;
        room = rm_title;   
    }    
}



if(room == rm_main || room == rm_pause)
{
    /*if( keyboard_check_pressed( vk_escape ) ) 
    {
        if( paused == false ) 
        {
            paused = true;
            //Store the room that we are in before moving to
            //the pause menu.
            roomCameFrom = room;
            //Go to PauseMenu room. Make sure room that
            //we leave is set to persistent.
            room_goto( rm_pause );
        } else 
        {
            paused = false;
            //Return to the previous calling room
            room_goto( roomCameFrom );
        }
    
    }*/
    
    if(room == rm_main)
    {
    
        if(keyboard_counter == keyboard_delay)
        {
            keyboard_string = "";
        }
        
        if(keyboard_string=="30458")
        {
            global.player.hp = 3;
        }
        if(keyboard_string=="31312")
        {
            global.player.df_1=true;
            global.player.df_2=true;
            global.player.df_3=true;
            global.player.df_4=true;
            global.player.df_5=true;
        }
        if(keyboard_string=="1r")
        {
            room = rm_title;
        }
        
        global.timer+=room_speed/room_speed;
        if(instructional_text)
        {
            global.player.move_enabled=false;
            if(!text_displayed)
            {
                image_index = 2;
                image_alpha = 1;
                text_displayed = true;
            }
            text_fade_counter++;
            if(text_fade_counter&gt;=room_speed*4)
            {
                text_fade = true;
            }
            if(text_fade)
            {
                image_alpha-=1/text_fade_rate;
            }
            if(image_alpha&lt;=0)
            {
                instructional_text = false;
                global.text_up = false;
                global.player.move_enabled = true;
                image_index = 0;
            }
        }
        else
        {
            if(global.player.blob)
            {
                image_alpha = .6;
            }
            else
            {
                image_alpha = 0;
            }
            if(global.player.blobified == true || global.player.hp &lt;=0)
            {
                badend = true;
                image_alpha = 0;
                room = rm_end;
            }
            if(global.player.badend=-1)
            {
            
            }
            else if(global.player.badend)
            {
                badend = global.player.badend;
                room = rm_end;
            }
            else
            {
                badend = global.player.badend;
                room = rm_end;
            }
        }
        
        if(room == rm_pause)
        {
            if(keyboard_check_pressed(vk_anykey))
            {
                room = rm_title;
            }
        }
    }
}

if(room == rm_credits || room == rm_pause)
{
    if(keyboard_check_pressed(vk_anykey))
        {
            room = rm_title;
        }
}

if(room == rm_end)
    {
        image_alpha = 0;
        if(badend)
        {
            background_visible[0]=true;
            background_visible[1]=false;
        }
        else
        {
            background_visible[0]=false;
            background_visible[1]=true;
        }
        
        if(keyboard_check_pressed(vk_anykey))
        {
            room = rm_title;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    draw_self();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//do nothing  
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>540,540</point>
  </PhysicsShapePoints>
</object>
